import { Message } from "./message";
import { FileInfo } from "./fileInfo";
import { File } from "./file";
export declare namespace Riven {
    namespace Ext {
        type MediainfoResult = {
            /** 源地址 */
            asset: string;
            /** video/mp4 */
            mime: string;
            /** audio video image doc other */
            type: string;
            /** mediaInfo信息 */
            info: FileInfo.MediaInfo | FileInfo.ImageInfo;
            request_id: string;
            /** Ahri任务ID */
            job_id: string;
            /** 用户自定义信息 */
            user_data: string;
            /** 视频时长 */
            duration: string;
            /** 大小 */
            size: string;
        };
        type SnapshotResult = {
            /** 源地址 */
            asset: string;
            /** video/mp4 */
            mime: string;
            /** init processing success fail */
            state: string;
            /** Snapshot地址 */
            file: string;
            /** snapshot / transcode */
            task_type: string;
            /** audio video image doc other */
            type: string;
            request_id: string;
            job_id: string;
            user_data: string;
        };
        type WaveResult = {
            /** wave封面 */
            cover: string;
            decoded: boolean;
            /** 时长 */
            duration: string;
            id: string;
            hash: string;
            /** video/mp4 */
            mime: string;
            /** 大小 */
            size: string;
            /** asset/xxx */
            src: string;
            waves: File.Ext.Wave[];
        };
        type Transcode = {
            /** 生成后的地址 */
            file: string;
            percent: number;
            /** 清晰度 resolution HD / FHD 等 音频 128 192 320等 */
            res: string;
            /** init processing success fail */
            state: string;
        };
        type TranscodeResult = {
            /** 源地址 */
            asset: string;
            mime: string;
            type: string;
            transcode: Transcode[];
            request_id: string;
            job_id: string;
            user_data: string;
        };
        type MediaCenterContainer<T> = {
            /** 此资产所在的容器，如果是个人空间，则是用户ID，如果是项目资产，则是项目ID */
            container: string;
            /** 替代container当前意义，此资产所在的项目，如果是个人空间，则为空，如果是项目资产，则是项目ID */
            project_id: string;
            /** 此文件地址对应的资产ID */
            key: string;
            /** MediaCenter源消息体 */
            payload: T;
        };
        type OrganizationContainer<T> = {
            /** 用户ID */
            key: string;
            /** 组织(团队)ID */
            organization_id: string;
            /** Organization源消息体 */
            payload: T;
        };
    }
    type EventSocketnNotification = {
        state: number;
    } & Message.MessageEntity;
    type EventSocketMember = Message.Item;
    type MediaCenterMediaInfoUpdated = Ext.MediainfoResult;
    type MediaCenterSnapshotUpdated = Ext.SnapshotResult[];
    type MediaCenterTranscodeUpdated = Ext.TranscodeResult[];
    type EventSocketNotificationSync = {
        uid: number;
        obj_id: number;
        obj_type: boolean;
    };
    interface Events {
        "event.link.statsync": EventSocketNotificationSync;
        "event.link.message": EventSocketnNotification;
        "event.socket.member": EventSocketMember;
        "mediacenter.mediainfo.updated": Ext.MediaCenterContainer<MediaCenterMediaInfoUpdated>;
        "mediacenter.snapshot.updated": Ext.MediaCenterContainer<MediaCenterSnapshotUpdated>;
        "mediacenter.transcode.updated": Ext.MediaCenterContainer<MediaCenterTranscodeUpdated>;
    }
}
