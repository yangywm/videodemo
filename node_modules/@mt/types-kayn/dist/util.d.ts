export declare namespace Util {
    type Merge<T, U> = {
        [P in keyof Omit<T, keyof U>]: T[P];
    } & {
        [P in keyof U]: U[P];
    };
    /**
     * T为基础定义，P1,P2为Prop
     * P1，P2至少需要传递一个值。
     */
    type Toggle<T, P1, P2> = ({
        [P in Exclude<keyof T, P1 | P2>]: T[P];
    } & {
        [P in Extract<keyof T, P1>]+?: T[P];
    } & {
        [P in Extract<keyof T, P2>]-?: T[P];
    }) | ({
        [P in Exclude<keyof T, P1 | P2>]: T[P];
    } & {
        [P in Extract<keyof T, P1>]-?: T[P];
    } & {
        [P in Extract<keyof T, P2>]+?: T[P];
    });
    /**
     * T为基础定义，U为Prop
     * 从T中选择出U，生成一个方法，参数为(key, value)
     *  */
    type SetPickProp<T, U> = <P extends Extract<keyof T, U>>(key: P, value: T[P]) => void;
    /**
     * T为基础定义
     * 遍历T的Prop，并生成一个方法描述，参数为(key, value)
     */
    type SetChildProp<T> = <P extends Extract<keyof T, string>>(key: P, value: T[P]) => void;
}
