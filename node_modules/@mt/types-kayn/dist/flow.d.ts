import { Asset, Member } from '.';
export declare namespace Flow {
    namespace Ext {
        /**
         * 创建流程
         */
        interface CreateFlow {
            flow_name: string;
        }
        /**
         * 创建流程节点
         */
        interface CreateNode {
            node_name: string;
            group: NodeGroup;
            color: string;
        }
        enum NodeGroup {
            INIT = 1,
            UNDERWAY = 2,
            COMPLETE = 3,
            END = 4
        }
        /** 任务类型 */
        enum NodeTaskType {
            /** 无意义 */
            DEFAULT = 0,
            /** 待办任务 */
            TODO = 1,
            /** 审批任务 */
            APPROVAL = 2
        }
        /** 审批类型 */
        enum AuditType {
            /** 无意义 */
            DEFAULT = 0,
            /** 无需审核 */
            NONE = 1,
            /** 或签 */
            ORSIGN = 2,
            /** 会签 */
            COUNTERSIGN = 3
        }
        /** 处理结果 */
        enum Result {
            /** 无意义 */
            DEFAULT = 0,
            /** 未处理 */
            UNREAD = 1,
            /** 已阅 */
            READ = 2,
            /** 通过 */
            RESOLVE = 3,
            /** 驳回 */
            REJECT = 4
        }
        /** 处理状态 */
        enum State {
            /** 无意义 */
            DEFAULT = 0,
            /** 未处理 */
            UNDO = 1,
            /** 处理中 */
            DOING = 2,
            /** 已处理 */
            DONE = 3,
            /** 无需处理 */
            NONEED = 4,
            /** 撤销 */
            CANCEL = 5,
            /** 销毁 */
            DESTROY = 6
        }
    }
    /**
     * 流程节点
     */
    interface Node {
        color: string;
        flow_id: string;
        group: Ext.NodeGroup;
        node_id: string;
        node_name: string;
        sort: number;
    }
    /**
     * 流程
     */
    interface Item {
        flow_id: string;
        flow_name: string;
        nodes: Node[];
        default: boolean;
    }
    interface Task {
        /** 审批类型 */
        audit_type: Ext.AuditType;
        /** 任务成员 */
        members: Member.MemberInfos[];
        node_task_id: string;
        /** 任务类型 */
        task_type: Ext.NodeTaskType;
    }
    interface NodeWithTask extends Node {
        tpl_node_tasks: Task[];
    }
    interface ItemWithTask extends Item {
        nodes: NodeWithTask[];
    }
    /** 资产流程信息 */
    interface AssetTaskItem {
        asset?: Asset.ItemWithForeignKeys;
        asset_id: string;
        asset_node_task_id: string;
        /** 任务成员 */
        member_tasks: {
            asset_node_task_id: string;
            member: Member.MemberInfos;
            member_id: string;
            org_member_id: string;
            result: Ext.Result;
            state: Ext.State;
            asset_member_task_id: string;
            created_at: number;
            handled_at: number;
        }[];
        /** 当前节点内容 */
        origin_node?: NodeWithTask;
        origin_node_id: string;
        project?: {
            id: string;
            root_asset_id: string;
            title: string;
        };
        project_id: string;
        /** 处理结果 */
        result: Ext.Result;
        /** 处理状态  */
        state: Ext.State;
        /** 变更节点内容 */
        target_node?: NodeWithTask;
        target_node_id: string;
        /** 审批类型 */
        tpl_audit_type: Ext.AuditType;
        /** 任务类型 */
        tpl_task_type: Ext.NodeTaskType;
        /** 任务id */
        tpl_node_task_id: string;
        /** 操作人信息 */
        trigger_member: Member.MemberInfos;
        trigger_member_id: string;
        trigger_org_member_id: string;
        xpath: string;
        /** 创建时间 */
        created_at: number;
        /** 处理时间 */
        handled_at: number;
    }
    interface AssetNodeLogItem {
        asset_id: string;
        asset_node_task_id: string;
        link: {
            link_id: string;
            link_type: string;
            title: string;
        };
        member_tasks: {
            asset_node_member_task_id: string;
            asset_node_task_id: string;
            created_at: number;
            handled_at: number;
            org_member_avatar: string;
            org_member_id: string;
            org_member_nickname: string;
            project_id: string;
            result: Ext.Result;
            state: Ext.State;
            is_current: boolean;
            member: Member.MemberInfos;
        }[];
        origin_node_id: string;
        origin_node_name: string;
        origin_node_color: string;
        project_id: string;
        result: Ext.Result;
        state: Ext.State;
        created_at: number;
        handled_at: number;
        target_node_id: string;
        target_node_color: string;
        target_node_name: string;
        tpl_audit_type: Ext.AuditType;
        tpl_task_type: Ext.NodeTaskType;
        trigger_member: Member.MemberInfos;
        trigger_org_member_avatar: string;
        trigger_org_member_id: string;
        trigger_org_member_nickname: string;
    }
}
