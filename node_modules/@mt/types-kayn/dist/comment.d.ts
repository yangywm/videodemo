import { Base } from './base';
import { File } from './file';
import { Asset, Member } from '.';
export declare namespace Comment {
    namespace Ext {
        enum Level {
            ROOT = 0,
            COMMENT = 1,
            REPLIES = 2
        }
    }
    namespace Param {
        interface AttachmentsCreate {
            fullUrl: string;
            hash: string;
            mime: string;
            size: number;
            src: string;
        }
        enum ReplyFilter {
            /** 全部批注 */
            'all' = "all",
            /** 已修改批注 */
            'completed' = "completed",
            /** 未修改批注 */
            'uncompleted' = "uncompleted",
            /** 全员可见批注 */
            'all_member' = "all_member",
            /** 项目成员可见批注 */
            'project_member' = "project_member"
        }
        interface CreateReplies {
            text?: string;
            /** 附件 */
            attachments?: AttachmentsCreate[];
            /** 新版附件 */
            attachments_asset_ids?: string[];
            /** 画笔 */
            annotation?: string;
            begin?: number;
            end?: number;
            /** 入点时间码 */
            time_entry_point?: string;
            /** 出点时间码 */
            time_out_point?: string;
            /** 艾特 */
            mentions?: {
                [key: string]: string;
            };
            /** 批注可见范围
             * 0 全员可见
             * 1 项目成员可见
             */
            is_private?: number;
            filter?: ReplyFilter;
            /** 批注标签 */
            tag_id?: Tag.Item['tag_id'][];
        }
    }
    /** 附件信息 */
    namespace attachments {
        interface Item extends Base.Item {
            /** 批注附件的asset_id，旧的附件没有或者为'0' */
            asset_id: string;
            /** 评论id */
            comment_id: string;
            /** 文件id */
            file_id: string;
            /**
             * 文件信息
             * {@link File.Item}
             */
            file: File.Item;
            id: string;
            title: string;
            type?: Asset.Ext.Type;
            category?: Asset.Ext.Category;
        }
    }
    /** 批注标签 */
    namespace Tag {
        interface Item {
            /** ID */
            tag_id: string;
            /** 标签名 */
            title: string;
            /** 标签名 */
            color: string;
        }
        type CreateParams = Partial<Exclude<Item, 'id'>>;
    }
    interface Item extends Base.Item {
        /** 图形注释数据 */
        annotation: string;
        /** 是否为匿名 */
        anonymous: boolean;
        /** 资产id */
        asset_id: string;
        /** 资产信息 */
        asset: Asset.Item;
        /** 附件 */
        attachments: attachments.Item[];
        /** 匿名用户名称 */
        author: string;
        /** 入点时间码 */
        time_entry_point: string;
        /** 出点时间码 */
        time_out_point: string;
        /** 评论所处的开始时间 */
        begin: number;
        /** 评论所处的开始时间 */
        end: number;
        /** 是否完成状态 */
        completed: boolean;
        /** 完成状态时间 */
        completed_at: string;
        /** 完成id */
        completer_id: string;
        /** 匿名评论联系方式 */
        contact: string;
        /** 是否有回复 */
        has_replies: boolean;
        /** 评论层级 0 root 业务上用不到 */
        level: Ext.Level;
        /** 点赞数， abort */
        like_count: number;
        /** 艾特, id: nickname */
        mentions: Record<string, string> | null;
        /** 评论文本 */
        text: string;
        parent_id: string;
        referrer: null | ItemWithForeignKeys;
        referrer_id: string;
        /** 回复 */
        replies: ItemWithForeignKeys[];
        /** 浏览数 */
        view_count: number;
        /**
         * 评论类型
         * - 0.全部
         * - 1.审阅
         * - 2.演示
         */
        comment_type: number;
        /** 回复数 */
        replies_count: number;
        /** 是否已读 */
        had_read: boolean;
        /** 批注可见范围 */
        is_private?: number;
        /** 密码 */
        password?: string;
        /** 修改次数 */
        change_count: number;
    }
    enum CommentState {
        /**
         * 0 正常
         */
        Normal = "0",
        /**
         * 1 已编辑
         */
        Edited = "1",
        /**
         * 2 已删除
         */
        Deleted = "2"
    }
    interface ItemWithForeignKeys extends Item {
        /** 数据与owner相同， 算是平替， 未来会应该会删掉owner */
        member: Member.NewBaseItem;
        /** 更新人的信息 */
        modified_org_member: Member.NewBaseItem;
        /** 创建人- 未来会废弃 */
        owner: Member.MemberInfos;
        /** 评论创建人的身份ID */
        org_member_id: string;
        /** 更新人的身份id */
        modified_org_member_id: string;
        /** 当前批注的状态，编辑， 删除 */
        state: CommentState;
        /** 创建人的user_id */
        owner_id: string;
        /** 批注所属资产的版本 */
        asset_rank: number;
        /** 更新时间， 未来可能会废弃update_at */
        modified_at: string;
        /** 批注标签 */
        tags?: Tag.Item[];
        /** 被复制过来的批注 */
        copied: boolean;
    }
}
